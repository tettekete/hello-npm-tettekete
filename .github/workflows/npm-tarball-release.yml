name: npm pack and make GitHub Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Specify the tag (optional)'
        required: false

# GITHUB_TOKEN の権限調整 
permissions:
  contents: write  # リリース作成に必要
  packages: write  # npm packの結果をリリースにアップロードするために必要

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # タグを取得するためにすべての履歴を取得
        # fetch-tags: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Get the latest tag
      id: get_latest_tag
      run: |
        if [ -n "${{ github.event.inputs.tag }}" ]; then
          echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
        else
          TAG=$(git describe --tags --abbrev=0)
          echo "TAG_NAME=$TAG" >> $GITHUB_ENV
        fi
      shell: bash
    
    - name: "DEBUG - env.TAG_NAME"
      run: |
        echo "env.TAG_NAME: ${{ env.TAG_NAME }}"

    - name: Check if release exists
      id: check_release
      run: |
        RELEASE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.TAG_NAME }})
        if [ "$RELEASE_RESPONSE" = "200" ]; then
          echo "Release already exists."
          exit 0
        fi
      shell: bash
  
    - name: Checkout specific tag
      run: |
          git checkout ${{ env.TAG_NAME }}
      shell: bash
    
    - name: Get commit message for the tag
      id: get_commit_message
      run: |
        # タグに紐づくコミットメッセージを取得
        COMMIT_MESSAGE=$(git log -1 --format=%B)
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

    - name: "DEBUG - env.COMMIT_MESSAGE"
      run: |
        echo "env.TAG_NAME: ${{ env.COMMIT_MESSAGE }}"

    - name: Install dependencies
      run: npm install

    - name: Create npm package
      run: npm pack

    - name: Get generated tarball name
      id: get_tarball_name
      run: echo "TARBALL_NAME=$(ls *.tgz)" >> $GITHUB_ENV
    
    - name: "DEBUG - env.TARBALL_NAME"
      run: |
        echo "env.TAG_NAME: ${{ env.TARBALL_NAME }}"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: Release ${{ env.TAG_NAME }}
        body: ${{ env.COMMIT_MESSAGE }}
        draft: false
        prerelease: false

    - name: Upload npm package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.TARBALL_NAME }}
        asset_name: ${{ env.TARBALL_NAME }}
        asset_content_type: application/gzip
    
